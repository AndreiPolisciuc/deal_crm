{"version":3,"file":"static/js/975.5a0c92d1.chunk.js","mappings":"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","sources":["components/NoteTextareaForm.tsx","pages/Dashboard.tsx","store/useStatusStore.ts"],"sourcesContent":["import React, {useState} from 'react';\nimport {Button, Form} from \"react-bootstrap\";\nimport {useHouseStore} from \"../store/useHouseStore\";\n\ntype Props = {\n    id:number,\n    note:string,\n    filterHouses:()=>void;\n}\n\nconst NoteTextareaForm = ({id, note, filterHouses}: Props) => {\n    const {changeNote} =useHouseStore()\n    const[newNote, setNewNote] = useState(note);\n\n    return (\n        <Form>\n            <Form.Group controlId=\"noteText\">\n                <Form.Control\n                    as=\"textarea\"\n                    rows={3}\n                    placeholder=\"Input note...\"\n                    value={newNote}\n                    onChange={(event)=>setNewNote(event.target.value)}\n                />\n            </Form.Group>\n\n            <Button\n                variant=\"primary\"\n                className=\"mt-2\"\n                onClick={async () => {\n                    await changeNote(id, newNote);\n                    filterHouses();\n                }}\n            >\n                Save\n            </Button>\n        </Form>\n\n    );\n};\n\nexport default NoteTextareaForm;","import React, {useEffect} from 'react';\nimport {Button, Card, Container, Form, Table} from \"react-bootstrap\";\nimport {useStatusStore} from \"../store/useStatusStore\";\nimport {useUserStore} from \"../store/useUserStore\";\nimport {useHouseStore} from \"../store/useHouseStore\";\nimport {useMediaQuery} from \"react-responsive\";\nimport {Link} from \"react-router-dom\";\nimport NoteTextareaForm from \"../components/NoteTextareaForm\";\n\nconst Dashboard = () => {\n    // Fetch stores\n    const { statuses, fetchStatuses } = useStatusStore();\n    const { user, fetchUser } = useUserStore();\n    const {housesFiltered, fetchFilterHouses, changeStatus} = useHouseStore();\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n\n    const dateStr = `${year}-${month}-${day} 12:00:00`;\n\n    const isMobile = useMediaQuery({ maxWidth: 767 });\n\n    housesFiltered.sort((a, b) => new Date(a.target_date).getTime() - new Date(b.target_date).getTime());\n    const groupedByDate: Record<string, typeof housesFiltered> = {};\n    for (const item of housesFiltered) {\n        const dateKey = item.target_date.slice(0, 10);\n\n        if (!groupedByDate[dateKey]) {\n            groupedByDate[dateKey] = [];\n        }\n\n        groupedByDate[dateKey].push(item);\n    }\n\n    // Fetch data when component mounts\n    useEffect(() => {\n        fetchStatuses();\n        fetchUser(2);\n        filterHouses();\n    }, []);\n\n    const filterHouses = () => {\n        fetchFilterHouses(\n            '',\n             '',\n            '2',\n            '',\n            '',\n            dateStr\n        );\n    };\n\n    return (\n        <Container>\n            <h1>Dashboard</h1>\n            <hr />\n            <h4>{user.name}</h4>\n            {!isMobile ? (\n                Object.entries(groupedByDate).map(([date, items]) => (\n                        <div key={date}>\n                            <h5>{date}</h5>\n                        <Table striped bordered hover responsive=\"sm\">\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th className=\"text-start\">House</th>\n                            <th className=\"text-start\">Type Of work</th>\n                            <th>Status</th>\n                            <th>Note</th>\n                        </tr>\n                        </thead>\n                            <tbody>\n                        {items.map((house) => (\n                            <tr key={house.id}>\n                                <td className={\"align-middle\"}>{house.house_id}</td>\n                                <td className=\"text-start align-middle w-25\">\n\n                                    <b>Lot {house.house_name}</b>\n                                    <div className={\"d-block\"}>\n                                        <Link className={\"me-2\"}\n                                              to={`/companies/${house.company_id}/${house.construction_id}`}>\n                                            {house.construction_name}\n                                        </Link>\n                                        <i>\n                                            <Link\n                                                to={`/companies/${house.company_id}/${house.construction_id}/${house.plan_id}`}>\n                                                ({house.plan_name})\n                                            </Link>\n                                        </i>\n                                    </div>\n                                    {house.construction_location &&\n                                    <div className=\"d-block mt-2\">\n                                        <Button className={\"mx-1\"} variant=\"outline-secondary\" href={house.construction_location} target=\"_blank\">\n                                            <i className=\"bi bi-geo-alt-fill me-2\"></i>\n                                            Location\n                                        </Button>\n                                    </div>}\n\n\n                                    {(house.street && house.city && house.zip_code) &&\n                                        <>\n                                            <hr></hr>\n                                            <span className=\"text-start me-2 d-block\">Address:</span>\n                                            <a href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(`${house.street} ${house.unit}, ${house.city}, ${house.state} ${house.zip_code}, USA`)}`}\n                                               target=\"_blank\" rel=\"noopener noreferrer\">\n                                                {house.street} {house.unit}, {house.city}, {house.state} {house.zip_code},\n                                                USA\n                                            </a>\n                                        </>}\n\n                                </td>\n                                <td className={\"align-middle\"}>\n                                    {house.type_of_work_name}\n                                </td>\n\n                                <td className={\"align-middle\"}>\n                                    <Form.Select\n                                        required\n                                        name=\"status_id\"\n                                        style={{\n                                            backgroundColor: house.status_color,\n                                            color: 'white',\n                                        }}\n                                        onChange={async (event) => {\n                                            const value = event.target.value;\n                                            await changeStatus(house.id, value);\n                                            filterHouses();\n                                        }}\n                                    >\n                                        {statuses.map((status) => (\n                                            <option style={{backgroundColor: status.color}}\n                                                    selected={status.id === house.status_id}\n                                                    value={status.id}>{status.name}</option>\n                                        ))}\n\n\n                                    </Form.Select>\n\n                                </td>\n                                <td className={\"align-middle text-end\"}>\n                                    <NoteTextareaForm id={house.id} note={house.note} filterHouses={filterHouses}/>\n                                </td>\n                            </tr>\n                        ))}\n\n                            </tbody>\n                    </Table>\n                        </div>))) : (Object.entries(groupedByDate).map(([date, items]) => (\n                            <div key={date}>\n                                <h5>{date}</h5><>\n                                {items.map((house) => (\n                                    <Card key={house.id} className=\"mb-2\">\n                                        <Card.Body>\n                                            <div>\n                                                <b>Lot {house.house_name}</b>\n                                                <div className={\"d-block\"}>\n                                                    <Link className={\"me-2\"}\n                                                          to={`/companies/${house.company_id}/${house.construction_id}`}>\n                                                        {house.construction_name}\n                                                    </Link>\n                                                    <i>\n                                                        <Link\n                                                            to={`/companies/${house.company_id}/${house.construction_id}/${house.plan_id}`}>\n                                                            ({house.plan_name})\n                                                        </Link>\n                                                    </i>\n                                                </div>\n                                            </div>\n                                            {(house.street && house.city && house.zip_code) &&\n                                                <>\n                                                    <hr></hr>\n                                                    <span className=\"text-start me-2 d-block\">Address:</span>\n                                                    <a href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(`${house.street} ${house.unit}, ${house.city}, ${house.state} ${house.zip_code}, USA`)}`}\n                                                       target=\"_blank\" rel=\"noopener noreferrer\">\n                                                        {house.street} {house.unit}, {house.city}, {house.state} {house.zip_code},\n                                                        USA\n                                                    </a>\n                                                </>}\n                                            <hr></hr>\n                                            <div>\n                                                <label className={\"me-1\"}>Type Of Work:</label>\n                                                {house.type_of_work_name}\n                                            </div>\n\n                                            <div>\n                                                <span className={\"d-block\"}>Status:</span>\n                                                <Form.Select\n                                                    required\n                                                    name=\"status_id\"\n                                                    style={{\n                                                        backgroundColor: house.status_color,\n                                                        color: 'white',\n                                                    }}\n                                                    onChange={async (event) => {\n                                                        const value = event.target.value;\n                                                        await changeStatus(house.id, value);\n                                                        filterHouses();\n                                                    }}\n                                                >\n                                                    {statuses.map((status) => (\n                                                        <option style={{backgroundColor: status.color}}\n                                                                selected={status.id === house.status_id}\n                                                                value={status.id}>{status.name}</option>\n                                                    ))}\n\n\n                                                </Form.Select>\n                                            </div>\n\n                                            <hr></hr>\n                                            <div>\n                                                <NoteTextareaForm id={house.id} note={house.note}\n                                                                  filterHouses={filterHouses}/>\n                                            </div>\n                                        </Card.Body>\n                                    </Card>\n                                ))}\n                            </>\n                            </div>)))\n            }\n\n        </Container>\n    );\n};\n\nexport default Dashboard;","import { create } from 'zustand';\nimport axios from 'axios';\nimport {Status, StatusInput, StatusInputEdit} from \"../types/Status\";\nimport {SERVER_LINK} from \"../globals\";\n\ninterface StatusState {\n    statuses: Status[];\n    status:Status;\n    loading: boolean;\n    error: string | null;\n    fetchStatuses: () => Promise<void>;\n    fetchActiveStatuses: () => Promise<void>;\n    fetchStatus: (id:number) => Promise<void>;\n    addStatus: (Status: StatusInput) => Promise<void>;\n    deleteStatus: (id: number) => Promise<void>;\n    updateStatus: (Status: StatusInputEdit) => Promise<void>;\n\n}\n\nconst apiLinkToServer = SERVER_LINK+'/api/status';\n\nexport const useStatusStore = create<StatusState>((set, get) => ({\n    statuses: [],\n    loading: false,\n    error: null,\n    status:{\n        id:0,\n        name:'',\n        created_at:'',\n        active:true,\n        sort:500,\n        color:''\n    },\n\n    fetchStatus: async (id) => {\n        set({ loading: true, error: null });\n        try {\n            const res = await axios.get<Status>(apiLinkToServer+\"/\"+id);\n            set({ status: res.data, loading: false });\n        } catch (err: any) {\n            set({ error: err.message, loading: false });\n        }\n    },\n\n\n\n    fetchStatuses: async () => {\n        set({ loading: true, error: null });\n        try {\n            const res = await axios.get<Status[]>(apiLinkToServer);\n            set({ statuses: res.data, loading: false });\n        } catch (err: any) {\n            set({ error: err.message, loading: false });\n        }\n    },\n    fetchActiveStatuses: async () => {\n        set({ loading: true, error: null });\n        try {\n            const res = await axios.get<Status[]>(apiLinkToServer+\"/active\");\n            set({ statuses: res.data, loading: false });\n        } catch (err: any) {\n            set({ error: err.message, loading: false });\n        }\n    },\n\n    addStatus: async (Status: StatusInput) => {\n        set({ loading: true, error: null });\n        try {\n            await axios.post(apiLinkToServer, Status);\n            await get().fetchStatuses();\n        } catch (err: any) {\n            set({ error: err.message });\n        }\n        set({ loading: false });\n    },\n    updateStatus: async (Status: StatusInputEdit) => {\n        set({ loading: true, error: null });\n        try {\n            await axios.put(apiLinkToServer+\"/\"+Status.id, Status);\n            await get().fetchStatuses();\n        } catch (err: any) {\n            set({ error: err.message });\n        }\n        set({ loading: false });\n    },\n\n    deleteStatus: async (id: number) => {\n        set({ loading: true, error: null });\n        try {\n            await axios.delete(`${apiLinkToServer}/${id}`);\n            await get().fetchStatuses(); // обновим список\n        } catch (err: any) {\n            set({ error: err.message });\n        }\n        set({ loading: false });\n    },\n}));\n"],"names":["_ref","id","note","filterHouses","changeNote","useHouseStore","newNote","setNewNote","useState","_jsxs","Form","children","_jsx","Group","controlId","Control","as","rows","placeholder","value","onChange","event","target","Button","variant","className","onClick","async","Dashboard","statuses","fetchStatuses","useStatusStore","user","fetchUser","useUserStore","housesFiltered","fetchFilterHouses","changeStatus","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","dateStr","concat","isMobile","useMediaQuery","maxWidth","sort","a","b","target_date","getTime","groupedByDate","item","dateKey","slice","push","useEffect","Container","name","Object","entries","map","_ref2","date","items","_Fragment","house","Card","Body","house_name","Link","to","company_id","construction_id","construction_name","plan_id","plan_name","street","city","zip_code","href","encodeURIComponent","unit","state","rel","type_of_work_name","Select","required","style","backgroundColor","status_color","color","status","selected","status_id","NoteTextareaForm","Table","striped","bordered","hover","responsive","house_id","construction_location","apiLinkToServer","SERVER_LINK","create","set","get","loading","error","created_at","active","fetchStatus","res","axios","data","err","message","fetchActiveStatuses","addStatus","post","Status","updateStatus","put","deleteStatus","delete"],"sourceRoot":""}