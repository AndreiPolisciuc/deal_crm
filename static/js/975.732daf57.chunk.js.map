{"version":3,"file":"static/js/975.732daf57.chunk.js","mappings":"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","sources":["components/NoteTextareaForm.tsx","pages/Dashboard.tsx","store/useStatusStore.ts"],"sourcesContent":["import React, {useState} from 'react';\nimport {Button, Form} from \"react-bootstrap\";\nimport {useHouseStore} from \"../store/useHouseStore\";\n\ntype Props = {\n    id:number,\n    note:string,\n    filterHouses:()=>void;\n}\n\nconst NoteTextareaForm = ({id, note, filterHouses}: Props) => {\n    const {changeNote} =useHouseStore()\n    const[newNote, setNewNote] = useState(note);\n\n    return (\n        <Form>\n            <Form.Group controlId=\"noteText\">\n                <Form.Control\n                    as=\"textarea\"\n                    rows={3}\n                    placeholder=\"Input note...\"\n                    value={newNote}\n                    onChange={(event)=>setNewNote(event.target.value)}\n                />\n            </Form.Group>\n\n            <Button\n                variant=\"primary\"\n                className=\"mt-2\"\n                onClick={async () => {\n                    await changeNote(id, newNote);\n                    filterHouses();\n                }}\n            >\n                Save\n            </Button>\n        </Form>\n\n    );\n};\n\nexport default NoteTextareaForm;","import React, {useEffect} from 'react';\nimport { Card,  Container, Form,  Table} from \"react-bootstrap\";\nimport {useStatusStore} from \"../store/useStatusStore\";\nimport {useUserStore} from \"../store/useUserStore\";\nimport {useHouseStore} from \"../store/useHouseStore\";\nimport {useMediaQuery} from \"react-responsive\";\nimport {Link} from \"react-router-dom\";\nimport NoteTextareaForm from \"../components/NoteTextareaForm\";\n\nconst Dashboard = () => {\n    // Fetch stores\n    const { statuses, fetchStatuses } = useStatusStore();\n    const { user, fetchUser } = useUserStore();\n    const {housesFiltered, fetchFilterHouses, changeStatus} = useHouseStore();\n    const today = new Date().toISOString().slice(0, 10);\n\n\n    const isMobile = useMediaQuery({ maxWidth: 767 });\n\n    housesFiltered.sort((a, b) => new Date(a.target_date).getTime() - new Date(b.target_date).getTime());\n    const groupedByDate: Record<string, typeof housesFiltered> = {};\n    for (const item of housesFiltered) {\n        const dateKey = item.target_date.slice(0, 10);\n\n        if (!groupedByDate[dateKey]) {\n            groupedByDate[dateKey] = [];\n        }\n\n        groupedByDate[dateKey].push(item);\n    }\n\n    // Fetch data when component mounts\n    useEffect(() => {\n        fetchStatuses();\n        fetchUser(2);\n        filterHouses();\n    }, []);\n\n    const filterHouses = () => {\n        fetchFilterHouses(\n            '',\n             '',\n            '2',\n            '',\n            '',\n            today\n        );\n    };\n\n    return (\n        <Container>\n            <h1>Dashboard</h1>\n            <hr />\n            <h4>{user.name}</h4>\n            {!isMobile ? (\n                Object.entries(groupedByDate).map(([date, items]) => (\n                        <div key={date}>\n                            <h5>{date}</h5>\n                        <Table striped bordered hover responsive=\"sm\">\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th className=\"text-start\">House</th>\n                            <th className=\"text-start\">Type Of work</th>\n                            <th>Status</th>\n                            <th>Note</th>\n                        </tr>\n                        </thead>\n                            <tbody>\n                        {items.map((house) => (\n                            <tr key={house.id}>\n                                <td className={\"align-middle\"}>{house.house_id}</td>\n                                <td className=\"text-start align-middle w-25\">\n\n                                    <b>Lot {house.house_name}</b>\n                                    <div className={\"d-block\"}>\n                                        <Link className={\"me-2\"}\n                                              to={`/companies/${house.company_id}/${house.construction_id}`}>\n                                            {house.construction_name}\n                                        </Link>\n                                        <i>\n                                            <Link\n                                                to={`/companies/${house.company_id}/${house.construction_id}/${house.plan_id}`}>\n                                                ({house.plan_name})\n                                            </Link>\n                                        </i>\n                                    </div>\n\n\n                                    {(house.street && house.city && house.zip_code) &&\n                                        <>\n                                            <hr></hr>\n                                            <span className=\"text-start me-2 d-block\">Address:</span>\n                                            <a href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(`${house.street} ${house.unit}, ${house.city}, ${house.state} ${house.zip_code}, USA`)}`}\n                                               target=\"_blank\" rel=\"noopener noreferrer\">\n                                                {house.street} {house.unit}, {house.city}, {house.state} {house.zip_code},\n                                                USA\n                                            </a>\n                                        </>}\n\n                                </td>\n                                <td className={\"align-middle\"}>\n                                    {house.type_of_work_name}\n                                </td>\n\n                                <td className={\"align-middle\"}>\n                                    <Form.Select\n                                        required\n                                        name=\"status_id\"\n                                        style={{\n                                            backgroundColor: house.status_color,\n                                            color: 'white',\n                                        }}\n                                        onChange={async (event) => {\n                                            const value = event.target.value;\n                                            await changeStatus(house.id, value);\n                                            filterHouses();\n                                        }}\n                                    >\n                                        {statuses.map((status) => (\n                                            <option style={{backgroundColor: status.color}}\n                                                    selected={status.id === house.status_id}\n                                                    value={status.id}>{status.name}</option>\n                                        ))}\n\n\n                                    </Form.Select>\n\n                                </td>\n                                <td className={\"align-middle text-end\"}>\n                                    <NoteTextareaForm id={house.id} note={house.note} filterHouses={filterHouses}/>\n                                </td>\n                            </tr>\n                        ))}\n\n                            </tbody>\n                    </Table>\n                        </div>))) : (Object.entries(groupedByDate).map(([date, items]) => (\n                            <div key={date}>\n                                <h5>{date}</h5><>\n                                {items.map((house) => (\n                                    <Card key={house.id} className=\"mb-2\">\n                                        <Card.Body>\n                                            <div>\n                                                <b>Lot {house.house_name}</b>\n                                                <div className={\"d-block\"}>\n                                                    <Link className={\"me-2\"}\n                                                          to={`/companies/${house.company_id}/${house.construction_id}`}>\n                                                        {house.construction_name}\n                                                    </Link>\n                                                    <i>\n                                                        <Link\n                                                            to={`/companies/${house.company_id}/${house.construction_id}/${house.plan_id}`}>\n                                                            ({house.plan_name})\n                                                        </Link>\n                                                    </i>\n                                                </div>\n                                            </div>\n                                            {(house.street && house.city && house.zip_code) &&\n                                                <>\n                                                    <hr></hr>\n                                                    <span className=\"text-start me-2 d-block\">Address:</span>\n                                                    <a href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(`${house.street} ${house.unit}, ${house.city}, ${house.state} ${house.zip_code}, USA`)}`}\n                                                       target=\"_blank\" rel=\"noopener noreferrer\">\n                                                        {house.street} {house.unit}, {house.city}, {house.state} {house.zip_code},\n                                                        USA\n                                                    </a>\n                                                </>}\n                                            <hr></hr>\n                                            <div>\n                                                <label className={\"me-1\"}>Type Of Work:</label>\n                                                {house.type_of_work_name}\n                                            </div>\n\n                                            <div>\n                                                <span className={\"d-block\"}>Status:</span>\n                                                <Form.Select\n                                                    required\n                                                    name=\"status_id\"\n                                                    style={{\n                                                        backgroundColor: house.status_color,\n                                                        color: 'white',\n                                                    }}\n                                                    onChange={async (event) => {\n                                                        const value = event.target.value;\n                                                        await changeStatus(house.id, value);\n                                                        filterHouses();\n                                                    }}\n                                                >\n                                                    {statuses.map((status) => (\n                                                        <option style={{backgroundColor: status.color}}\n                                                                selected={status.id === house.status_id}\n                                                                value={status.id}>{status.name}</option>\n                                                    ))}\n\n\n                                                </Form.Select>\n                                            </div>\n\n                                            <hr></hr>\n                                            <div>\n                                                <NoteTextareaForm id={house.id} note={house.note}\n                                                                  filterHouses={filterHouses}/>\n                                            </div>\n                                        </Card.Body>\n                                    </Card>\n                                ))}\n                            </>\n                            </div>)))\n            }\n\n        </Container>\n    );\n};\n\nexport default Dashboard;","import { create } from 'zustand';\nimport axios from 'axios';\nimport {Status, StatusInput, StatusInputEdit} from \"../types/Status\";\nimport {SERVER_LINK} from \"../globals\";\n\ninterface StatusState {\n    statuses: Status[];\n    status:Status;\n    loading: boolean;\n    error: string | null;\n    fetchStatuses: () => Promise<void>;\n    fetchActiveStatuses: () => Promise<void>;\n    fetchStatus: (id:number) => Promise<void>;\n    addStatus: (Status: StatusInput) => Promise<void>;\n    deleteStatus: (id: number) => Promise<void>;\n    updateStatus: (Status: StatusInputEdit) => Promise<void>;\n\n}\n\nconst apiLinkToServer = SERVER_LINK+'/api/status';\n\nexport const useStatusStore = create<StatusState>((set, get) => ({\n    statuses: [],\n    loading: false,\n    error: null,\n    status:{\n        id:0,\n        name:'',\n        created_at:'',\n        active:true,\n        sort:500,\n        color:''\n    },\n\n    fetchStatus: async (id) => {\n        set({ loading: true, error: null });\n        try {\n            const res = await axios.get<Status>(apiLinkToServer+\"/\"+id);\n            set({ status: res.data, loading: false });\n        } catch (err: any) {\n            set({ error: err.message, loading: false });\n        }\n    },\n\n\n\n    fetchStatuses: async () => {\n        set({ loading: true, error: null });\n        try {\n            const res = await axios.get<Status[]>(apiLinkToServer);\n            set({ statuses: res.data, loading: false });\n        } catch (err: any) {\n            set({ error: err.message, loading: false });\n        }\n    },\n    fetchActiveStatuses: async () => {\n        set({ loading: true, error: null });\n        try {\n            const res = await axios.get<Status[]>(apiLinkToServer+\"/active\");\n            set({ statuses: res.data, loading: false });\n        } catch (err: any) {\n            set({ error: err.message, loading: false });\n        }\n    },\n\n    addStatus: async (Status: StatusInput) => {\n        set({ loading: true, error: null });\n        try {\n            await axios.post(apiLinkToServer, Status);\n            await get().fetchStatuses();\n        } catch (err: any) {\n            set({ error: err.message });\n        }\n        set({ loading: false });\n    },\n    updateStatus: async (Status: StatusInputEdit) => {\n        set({ loading: true, error: null });\n        try {\n            await axios.put(apiLinkToServer+\"/\"+Status.id, Status);\n            await get().fetchStatuses();\n        } catch (err: any) {\n            set({ error: err.message });\n        }\n        set({ loading: false });\n    },\n\n    deleteStatus: async (id: number) => {\n        set({ loading: true, error: null });\n        try {\n            await axios.delete(`${apiLinkToServer}/${id}`);\n            await get().fetchStatuses(); // обновим список\n        } catch (err: any) {\n            set({ error: err.message });\n        }\n        set({ loading: false });\n    },\n}));\n"],"names":["_ref","id","note","filterHouses","changeNote","useHouseStore","newNote","setNewNote","useState","_jsxs","Form","children","_jsx","Group","controlId","Control","as","rows","placeholder","value","onChange","event","target","Button","variant","className","onClick","async","Dashboard","statuses","fetchStatuses","useStatusStore","user","fetchUser","useUserStore","housesFiltered","fetchFilterHouses","changeStatus","today","Date","toISOString","slice","isMobile","useMediaQuery","maxWidth","sort","a","b","target_date","getTime","groupedByDate","item","dateKey","push","useEffect","Container","name","Object","entries","map","_ref2","date","items","_Fragment","house","Card","Body","house_name","Link","to","concat","company_id","construction_id","construction_name","plan_id","plan_name","street","city","zip_code","href","encodeURIComponent","unit","state","rel","type_of_work_name","Select","required","style","backgroundColor","status_color","color","status","selected","status_id","NoteTextareaForm","Table","striped","bordered","hover","responsive","house_id","apiLinkToServer","SERVER_LINK","create","set","get","loading","error","created_at","active","fetchStatus","res","axios","data","err","message","fetchActiveStatuses","addStatus","post","Status","updateStatus","put","deleteStatus","delete"],"sourceRoot":""}